{"version":3,"sources":["../../src/config/config.js"],"names":["configTemplate","_","CloudflareConfigCtrl","$scope","$injector","backendSrv","baseUrl","appEditCtrl","setPreUpdateHook","preUpdate","bind","setPostUpdateHook","postUpdate","appModel","jsonData","secureJsonData","apiValidated","apiError","enabled","tokenSet","validateApiConnection","token","initDatasource","Promise","resolve","self","then","importDashboards","promise","get","resp","promises","organizations","clusters","organizationList","result","forEach","e","name","push","id","status","c","organization","all","email","results","foundDs","ds","type","access","post","template"],"mappings":"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","file":"config.js","sourcesContent":["import configTemplate from './config.html!text';\n\nimport _ from 'lodash' ;\n\nclass CloudflareConfigCtrl {\n  constructor($scope, $injector, backendSrv) {\n    this.baseUrl = 'api/plugin-proxy/cloudflare-app/api/v4';\n    this.backendSrv = backendSrv;\n\n    this.appEditCtrl.setPreUpdateHook(this.preUpdate.bind(this));\n    this.appEditCtrl.setPostUpdateHook(this.postUpdate.bind(this));\n\n    if (!this.appModel.jsonData) {\n      this.appModel.jsonData = {};\n    }\n    if (!this.appModel.secureJsonData) {\n      this.appModel.secureJsonData = {};\n    }\n    this.apiValidated = false;\n    this.apiError = false;\n    if (this.appModel.enabled && this.appModel.jsonData.tokenSet) {\n      this.validateApiConnection();\n    }\n  }\n\n  preUpdate() {\n    if (this.appModel.secureJsonData.token)  {\n      this.appModel.jsonData.tokenSet = true;\n    }\n\n    return this.initDatasource();\n  }\n\n  postUpdate() {\n    if (!this.appModel.enabled) {\n      return Promise.resolve();\n    }\n    var self = this;\n    return this.validateApiConnection().then(() => {\n      return self.appEditCtrl.importDashboards()\n    });\n  }\n\n  /* Make sure that we can hit the Cloudflare API. */\n  validateApiConnection() {\n    var promise = this.backendSrv.get(this.baseUrl + '/user');\n    promise.then((resp) => {\n      this.apiValidated = true;\n      /* Update organizations list */\n      let promises = [];\n      let organizations = [];\n      this.appModel.jsonData.clusters = [];\n      let organizationList = resp.result.organizations || [];\n      organizationList.forEach(e => {\n        if (e.name != \"SELF\") {\n          organizations.push({name: e.name, id: e.id, status: e.status});\n          /* Update list of clusters */\n          promises.push(this.backendSrv.get(\n            this.baseUrl + '/organizations/' + e.id + '/virtual_dns').then(resp => {\n              resp.result.forEach(c => {\n                c.organization = e.id;\n                this.appModel.jsonData.clusters.push(c);\n              });\n          }));\n        }\n      });\n      /* Update user-level list of clusters */\n      promises.push(this.backendSrv.get(\n        this.baseUrl + '/user/virtual_dns').then(resp => {\n          resp.result.forEach(c => {\n            this.appModel.jsonData.clusters.push(c);\n          });\n      }));\n      this.appModel.jsonData.organizations = organizations;\n      return Promise.all(promises);\n    }, () => {\n      this.apiValidated = false;\n      this.apiError = true;\n    });\n    return promise;\n  }\n\n  reset() {\n    this.appModel.jsonData.clusters = [];\n    this.appModel.jsonData.organizations = [];\n    this.appModel.jsonData.email = '';\n    this.appModel.jsonData.tokenSet = false;\n    this.appModel.secureJsonData = {};\n    this.apiValidated = false;\n  }\n\n  initDatasource() {\n    /* Check for existing datasource, or create a new one */\n    var self = this;\n    return self.backendSrv.get('api/datasources').then(function(results) {\n      var foundDs = false;\n      _.forEach(results, function(ds) {\n        if (foundDs) { return; }\n        if (ds.name === \"cloudflare\") {\n          foundDs = true;\n        }\n      });\n      /* Create a new datasource */\n      var promises = [];\n      if (!foundDs) {\n        var ds = {\n          name: 'cloudflare',\n          type: 'cloudflare-api',\n          access: 'direct',\n          jsonData: {},\n        };\n        promises.push(self.backendSrv.post('api/datasources', ds));\n      }\n      return Promise.all(promises);\n    });\n  }\n}\n\nCloudflareConfigCtrl.template = configTemplate;\n\nexport {\n  CloudflareConfigCtrl as ConfigCtrl\n};\n"]}