{"version":3,"sources":["../../src/datasource/query_editor.js"],"names":["QueryCtrl","metricList","dimensionList","CloudflareQueryCtrl","$scope","uiSegmentSrv","$q","$injector","dimensions","slice","push","text","value","metrics","queryModes","target","from","filters","removeTagFilterSegment","newSegment","fake","buildSegmentModel","addMetricMode","key","currentMetricKey","indexOf","targetBlur","index","splice","refresh","segments","tag","length","newCondition","undefined","newKey","newOperator","operator","newKeyValue","newPlusButton","segment","type","when","newOperators","ds","datasource","options","promise","getTagKeys","getTagValues","then","results","_","map","angular","copy","Math","max","newFake","cssClass","updateVariableModel","filterIndex","hasFakes","forEach","condition","templateUrl"],"mappings":"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","file":"query_editor.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport {metricList, dimensionList} from './metric_def';\n\nclass CloudflareQueryCtrl extends QueryCtrl {\n\n  constructor($scope, uiSegmentSrv, $q, $injector) {\n    super($scope, $injector);\n    this.$q = $q;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.dimensions = dimensionList.slice();\n    this.dimensions.push({text: '', value: ''});\n    this.metrics = metricList;\n    this.queryModes = [\n      {value: 'zone', text: 'Zone'},\n      {value: 'vdns', text: 'Virtual DNS'}\n    ];\n    \n\n    this.target.from = this.target.from || 'zone';\n    if (!this.target.metrics) {\n      this.target.metrics = ['queryCount'];\n    }\n\n    if (!this.target.filters) {\n      this.target.filters = [];\n    }\n\n    this.removeTagFilterSegment = uiSegmentSrv.newSegment({fake: true, value: '-- remove filter --'});\n    this.buildSegmentModel()\n  }\n\n  addMetric() {\n    if (!this.addMetricMode) {\n      this.addMetricMode = true;\n      return;\n    }\n\n    if (!this.target.metrics) {\n      this.target.metrics = [];\n    }\n\n    let key = this.target.currentMetricKey;\n    this.target.currentMetricKey = '';\n\n    /* Sort out duplicates */\n    if (this.target.metrics.indexOf(key) < 0) {\n      this.target.metrics.push(key)\n    }\n\n    this.target.currentMetricKey = '';\n    this.addMetricMode = false;\n    this.targetBlur();\n  }\n\n  removeMetric(key) {\n    var index = this.target.metrics.indexOf(key);\n    if (index > -1) {\n        this.target.metrics.splice(index, 1);\n    }\n    this.targetBlur();\n  }\n\n  closeAddMetricMode() {\n    this.addMetricMode = false;\n  }\n\n  targetBlur() {\n    this.refresh();\n  }\n\n  /*\n   * This is adapted from AdHocFiltersCtrl\n   * Source: https://github.com/grafana/grafana/blob/master/public/app/features/dashboard/ad_hoc_filters.ts\n   */\n  buildSegmentModel() {\n    this.segments = [];\n\n    for (let tag of this.target.filters) {\n      if (this.segments.length > 0) {\n        this.segments.push(this.uiSegmentSrv.newCondition('AND'));\n      }\n\n      if (tag.key !== undefined && tag.value !== undefined) {\n        this.segments.push(this.uiSegmentSrv.newKey(tag.key));\n        this.segments.push(this.uiSegmentSrv.newOperator(tag.operator));\n        this.segments.push(this.uiSegmentSrv.newKeyValue(tag.value));\n      }\n    }\n\n    this.segments.push(this.uiSegmentSrv.newPlusButton());\n  }\n\n  getOptions(segment, index) {\n    if (segment.type === 'operator') {\n      return this.$q.when(this.uiSegmentSrv.newOperators(['=', '!=', '<', '>', '=~', '!~']));\n    }\n\n    if (segment.type === 'condition') {\n      return this.$q.when([this.uiSegmentSrv.newSegment('AND')]);\n    }\n\n    let ds = this.datasource;\n    var options = {};\n    var promise = null;\n\n    if (segment.type !== 'value') {\n      promise = ds.getTagKeys();\n    } else {\n      options.key = this.segments[index-2].value;\n      promise = ds.getTagValues(options);\n    }\n\n    return promise.then(results => {\n      results = _.map(results, segment => {\n        return this.uiSegmentSrv.newSegment({value: segment.text});\n      });\n\n      // add remove option for keys\n      if (segment.type === 'key') {\n        results.splice(0, 0, angular.copy(this.removeTagFilterSegment));\n      }\n      return results;\n    });\n  }\n\n  segmentChanged(segment, index) {\n    this.segments[index] = segment;\n\n    // handle remove tag condition\n    if (segment.value === this.removeTagFilterSegment.value) {\n      this.segments.splice(index, 3);\n      if (this.segments.length === 0) {\n        this.segments.push(this.uiSegmentSrv.newPlusButton());\n      } else if (this.segments.length > 2) {\n        this.segments.splice(Math.max(index-1, 0), 1);\n        if (this.segments[this.segments.length-1].type !== 'plus-button') {\n          this.segments.push(this.uiSegmentSrv.newPlusButton());\n        }\n      }\n    } else {\n      if (segment.type === 'plus-button') {\n        if (index > 2) {\n          this.segments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));\n        }\n        this.segments.push(this.uiSegmentSrv.newOperator('='));\n        this.segments.push(this.uiSegmentSrv.newFake('select tag value', 'value', 'query-segment-value'));\n        segment.type = 'key';\n        segment.cssClass = 'query-segment-key';\n      }\n\n      if ((index+1) === this.segments.length) {\n        this.segments.push(this.uiSegmentSrv.newPlusButton());\n      }\n    }\n\n    this.updateVariableModel();\n  }\n\n  updateVariableModel() {\n    let filters = [];\n    let filterIndex = -1;\n    let hasFakes = false;\n    this.segments.forEach(segment => {\n      if (segment.type === 'value' && segment.fake) {\n        hasFakes = true;\n        return;\n      }\n      switch (segment.type) {\n        case 'key': {\n          filters.push({key: segment.value});\n          filterIndex += 1;\n          break;\n        }\n        case 'value': {\n          filters[filterIndex].value = segment.value;\n          break;\n        }\n        case 'operator': {\n          filters[filterIndex].operator = segment.value;\n          break;\n        }\n        case 'condition': {\n          filters[filterIndex].condition = segment.value;\n          break;\n        }\n      }\n    });\n\n    if (!hasFakes) {\n      this.target.filters = filters;\n      this.targetBlur();\n    }\n  }\n}\n\nCloudflareQueryCtrl.templateUrl = 'datasource/query_editor.html';\n\nexport {CloudflareQueryCtrl};"]}